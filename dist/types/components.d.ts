/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
export namespace Components {
    interface MalInput {
    }
    interface MalMultiselect {
    }
    interface MalSelect {
        /**
          * The data for the dropdown options
         */
        "data": any[];
        /**
          * The name of the dropdown
         */
        "name": string;
        /**
          * The currently selected value
         */
        "value": any;
    }
    interface MyComponent {
    }
}
export interface MalSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMalSelectElement;
}
declare global {
    interface HTMLMalInputElement extends Components.MalInput, HTMLStencilElement {
    }
    var HTMLMalInputElement: {
        prototype: HTMLMalInputElement;
        new (): HTMLMalInputElement;
    };
    interface HTMLMalMultiselectElement extends Components.MalMultiselect, HTMLStencilElement {
    }
    var HTMLMalMultiselectElement: {
        prototype: HTMLMalMultiselectElement;
        new (): HTMLMalMultiselectElement;
    };
    interface HTMLMalSelectElementEventMap {
        "valueChange": any;
    }
    interface HTMLMalSelectElement extends Components.MalSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMalSelectElementEventMap>(type: K, listener: (this: HTMLMalSelectElement, ev: MalSelectCustomEvent<HTMLMalSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMalSelectElementEventMap>(type: K, listener: (this: HTMLMalSelectElement, ev: MalSelectCustomEvent<HTMLMalSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMalSelectElement: {
        prototype: HTMLMalSelectElement;
        new (): HTMLMalSelectElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "mal-input": HTMLMalInputElement;
        "mal-multiselect": HTMLMalMultiselectElement;
        "mal-select": HTMLMalSelectElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface MalInput {
    }
    interface MalMultiselect {
    }
    interface MalSelect {
        /**
          * The data for the dropdown options
         */
        "data"?: any[];
        /**
          * The name of the dropdown
         */
        "name"?: string;
        /**
          * Event emitted when the selection changes
         */
        "onValueChange"?: (event: MalSelectCustomEvent<any>) => void;
        /**
          * The currently selected value
         */
        "value"?: any;
    }
    interface MyComponent {
    }
    interface IntrinsicElements {
        "mal-input": MalInput;
        "mal-multiselect": MalMultiselect;
        "mal-select": MalSelect;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mal-input": LocalJSX.MalInput & JSXBase.HTMLAttributes<HTMLMalInputElement>;
            "mal-multiselect": LocalJSX.MalMultiselect & JSXBase.HTMLAttributes<HTMLMalMultiselectElement>;
            "mal-select": LocalJSX.MalSelect & JSXBase.HTMLAttributes<HTMLMalSelectElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
